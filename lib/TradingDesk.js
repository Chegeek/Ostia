/* TRADING DESK

TradingDesk.js keeps the logic loop going for the strategy and falcilitates trading
    by providing all neccesary data to a strategy.

Basic proces:
Set up all exchanges
Set up utilities

if backtest == true:
backtest();
else:
runTrading();
*/

// This will be generated by the user.
// Template config file [Not currently used]
// TODO: dicuss how to pass proper params to strategies
var config = {
  liveTrading: true,
  backtestMode: false,
  strategyName: 'simple-arbitrage',       // exponential moving average
  exchanges: ['GDAX'],                 // exchanges strategy will trade
  pair: 'BTCUSD',                 // or "none" for every pair
  capital: 3000,                     // starting capital
  timeFrame: 4,                        // how long to trade
  interval: 1000,
  blah: 'other param',
  API_KEYS: ['123XYZ']

  // strategyParams: {}
}

/*
TODO: Make this set-up procedure the goal!
var exchanges   = getExchanges();
var TradingHub  = new TradingHub(config.exchanges[0]);
var DataHub     = TradingHub.createOrderbooks();
var orderbook   = DataHub.getOrderbooks();
*/

// Set up all necessary data
var mapParse = require('./exchanges/map-parsing.js')
var arbitrage = require('./strategies/simple-arbitrage.js').largestSpreadArbitrage
var Order = require('./strategies/simple-arbitrage.js').order
var allExchangeData = require('./DataHub.js')

/*
TODO: Implement a driver functino that calls the specified strategy. Look up Issue #3
var strategyDriver = function(config) {
   var strategy = require("./lib/strategies/" + config.strategyName + ".js").outputExchangeData;
}
*/

// TODO: Implement while loop that runs strategy for specified time.
var runLiveTrading = function (/* config */) {
  console.log('hi')
  arbitrage('BTCUSD', 1000)

  // TODO: [See previous To-do]
  // var order = config.strategyDriver(config.strategyName, orderbooks);
}

module.exports = runLiveTrading

// TODO: Also export data to server with SocketIO for client-side visualizations
